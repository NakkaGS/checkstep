#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Aug 16, 2019 11:38:24 AM CDT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import checkStep_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    checkStep_support.set_Tk_var()
    top = title (root)
    checkStep_support.init(root, top)
    root.mainloop()

w = None
awl = None
def create_title(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    checkStep_support.set_Tk_var()
    top = title (w)
    checkStep_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_title():
    global w
    w.destroy()
    w = None

class title:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("457x327+650+150")
        top.title("Check Step7")
        top.configure(background="#d9d9d9")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.checkComments = tk.Checkbutton(top)
        self.checkComments.place(relx=0.022, rely=0.398, relheight=0.076, relwidth=0.374)
        self.checkComments.configure(activebackground="#ececec")
        self.checkComments.configure(activeforeground="#000000")
        self.checkComments.configure(background="#d9d9d9")
        self.checkComments.configure(disabledforeground="#a3a3a3")
        self.checkComments.configure(foreground="#000000")
        self.checkComments.configure(highlightbackground="#d9d9d9")
        self.checkComments.configure(highlightcolor="black")
        self.checkComments.configure(justify='left')
        self.checkComments.configure(text='''Check Network Comments''')
        self.checkComments.configure(variable=checkStep_support.checkCo)

        self.checkFBName = tk.Checkbutton(top)
        self.checkFBName.place(relx=0.022, rely=0.489, relheight=0.076, relwidth=0.245)
        self.checkFBName.configure(activebackground="#ececec")
        self.checkFBName.configure(activeforeground="#000000")
        self.checkFBName.configure(background="#d9d9d9")
        self.checkFBName.configure(disabledforeground="#a3a3a3")
        self.checkFBName.configure(foreground="#000000")
        self.checkFBName.configure(highlightbackground="#d9d9d9")
        self.checkFBName.configure(highlightcolor="black")
        self.checkFBName.configure(justify='left')
        self.checkFBName.configure(text='''Check FB Name''')
        self.checkFBName.configure(variable=checkStep_support.checkFB)

        self.statusProg = tk.LabelFrame(top)
        self.statusProg.place(relx=0.022, rely=0.673, relheight=0.229, relwidth=0.963)
        self.statusProg.configure(relief='groove')
        self.statusProg.configure(foreground="black")
        self.statusProg.configure(text='''Message''')
        self.statusProg.configure(background="#d9d9d9")
        self.statusProg.configure(width=440)
        
        self.message = tk.Label(self.statusProg, textvariable=checkStep_support.message)
        self.message.configure(background="#d9d9d9")
        self.message.configure(disabledforeground="#a3a3a3")
        self.message.configure(foreground="#000000")
        self.message.pack()
        
        self.awlFile = tk.Label(top)
        self.awlFile.place(relx=0.022, rely=0.031, height=21, width=52)
        self.awlFile.configure(background="#d9d9d9")
        self.awlFile.configure(disabledforeground="#a3a3a3")
        self.awlFile.configure(foreground="#000000")
        self.awlFile.configure(text='''AWL File''')

        self.pathAWLFile = tk.Label(top)
        self.pathAWLFile.place(relx=0.022, rely=0.122, height=21, width=431)
        self.pathAWLFile.configure(activebackground="#f9f9f9")
        self.pathAWLFile.configure(activeforeground="black")
        self.pathAWLFile.configure(anchor='sw')
        self.pathAWLFile.configure(background="#d9d9d9")
        self.pathAWLFile.configure(compound='left')
        self.pathAWLFile.configure(disabledforeground="#a3a3a3")
        self.pathAWLFile.configure(foreground="#000000")
        self.pathAWLFile.configure(highlightbackground="#d9d9d9")
        self.pathAWLFile.configure(highlightcolor="black")
        self.pathAWLFile.configure(text='''AWL Path:''')
        self.pathAWLFile.configure(width=431)
        self.pathAWLFile.configure(textvariable=checkStep_support.awlpath)

        self.awlBrowse = tk.Button(top)
        self.awlBrowse.place(relx=0.197, rely=0.031, height=24, width=79)
        self.awlBrowse.configure(activebackground="#ececec")
        self.awlBrowse.configure(activeforeground="#000000")
        self.awlBrowse.configure(background="#d9d9d9")
        self.awlBrowse.configure(disabledforeground="#a3a3a3")
        self.awlBrowse.configure(foreground="#000000")
        self.awlBrowse.configure(highlightbackground="#d9d9d9")
        self.awlBrowse.configure(highlightcolor="black")
        self.awlBrowse.configure(pady="0")
        self.awlBrowse.configure(text='''Browse''')
        self.awlBrowse.configure(width=79)
        self.awlBrowse.configure(command=checkStep_support.awlBrowse)

        self.symbolBrowse = tk.Button(top)
        self.symbolBrowse.place(relx=0.197, rely=0.214, height=24, width=79)
        self.symbolBrowse.configure(activebackground="#ececec")
        self.symbolBrowse.configure(activeforeground="#000000")
        self.symbolBrowse.configure(background="#d9d9d9")
        self.symbolBrowse.configure(disabledforeground="#a3a3a3")
        self.symbolBrowse.configure(foreground="#000000")
        self.symbolBrowse.configure(highlightbackground="#d9d9d9")
        self.symbolBrowse.configure(highlightcolor="black")
        self.symbolBrowse.configure(pady="0")
        self.symbolBrowse.configure(text='''Browse''')
        self.symbolBrowse.configure(width=79)

        self.symbolFile = tk.Label(top)
        self.symbolFile.place(relx=0.022, rely=0.214, height=21, width=67)
        self.symbolFile.configure(background="#d9d9d9")
        self.symbolFile.configure(disabledforeground="#a3a3a3")
        self.symbolFile.configure(foreground="#000000")
        self.symbolFile.configure(text='''Symbol File''')

        self.pathSymbolFile = tk.Label(top)
        self.pathSymbolFile.place(relx=0.022, rely=0.306, height=21, width=76)
        self.pathSymbolFile.configure(background="#d9d9d9")
        self.pathSymbolFile.configure(disabledforeground="#a3a3a3")
        self.pathSymbolFile.configure(foreground="#000000")
        self.pathSymbolFile.configure(text='''Symbol Path:''')

        self.byNakata = tk.Label(top)
        self.byNakata.place(relx=0.481, rely=0.917, height=21, width=225)
        self.byNakata.configure(background="#d9d9d9")
        self.byNakata.configure(disabledforeground="#a3a3a3")
        self.byNakata.configure(foreground="#000000")
        self.byNakata.configure(text='''v0.1 - Developed by Gabriel Nakata - 2019''')

        self.startCheck = tk.Button(top)
        self.startCheck.place(relx=0.613, rely=0.459, height=24, width=95)
        self.startCheck.configure(activebackground="#ececec")
        self.startCheck.configure(activeforeground="#000000")
        self.startCheck.configure(background="#d9d9d9")
        self.startCheck.configure(disabledforeground="#a3a3a3")
        self.startCheck.configure(foreground="#000000")
        self.startCheck.configure(highlightbackground="#d9d9d9")
        self.startCheck.configure(highlightcolor="black")
        self.startCheck.configure(pady="0")
        self.startCheck.configure(text='''Start''')
        self.startCheck.configure(width=95)
        self.startCheck.configure(command=checkStep_support.startProgram)

if __name__ == '__main__':
    vp_start_gui()



